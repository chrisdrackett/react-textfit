

Object.defineProperty(exports, '__esModule', {
  value: true,
})

var _createClass = (function() {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i]
      descriptor.enumerable = descriptor.enumerable || false
      descriptor.configurable = true
      if ('value' in descriptor) descriptor.writable = true
      Object.defineProperty(target, descriptor.key, descriptor)
    }
  }
  return function(Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps)
    if (staticProps) defineProperties(Constructor, staticProps)
    return Constructor
  }
})()

var _react = require('react')

var _react2 = _interopRequireDefault(_react)

var _TextFit = require('./components/TextFit')

var _TextFit2 = _interopRequireDefault(_TextFit)

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj }
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError('Cannot call a class as a function')
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError(
      "this hasn't been initialised - super() hasn't been called",
    )
  }
  return call && (typeof call === 'object' || typeof call === 'function')
    ? call
    : self
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== 'function' && superClass !== null) {
    throw new TypeError(
      'Super expression must either be null or a function, not ' +
        typeof superClass,
    )
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true,
    },
  })
  if (superClass)
    Object.setPrototypeOf
      ? Object.setPrototypeOf(subClass, superClass)
      : (subClass.__proto__ = superClass)
}

var App = (function(_Component) {
  _inherits(App, _Component)

  function App() {
    var _ref

    var _temp, _this, _ret

    _classCallCheck(this, App)

    for (
      var _len = arguments.length, args = Array(_len), _key = 0;
      _key < _len;
      _key++
    ) {
      args[_key] = arguments[_key]
    }

    return (_ret = ((_temp = ((_this = _possibleConstructorReturn(
      this,
      (_ref = App.__proto__ || Object.getPrototypeOf(App)).call.apply(
        _ref,
        [this].concat(args),
      ),
    )), _this)), (_this.state = {
      text: 'Edit this text!',
      isSingleLine: false,
      min: 13,
      max: 100,
    }), (_this.handleChangeText = function(e) {
      _this.setState({ text: e.target.value })
    }), (_this.handleChangeMode = function(e) {
      _this.setState({ isSingleLine: e.target.value === 'single' })
    }), (_this.handleChangeMin = function(e) {
      _this.setState({ min: parseFloat(e.target.value) })
    }), (_this.handleChangeMax = function(e) {
      var value = e.target.value

      if (e.target.value === '') {
        value = false
      } else {
        value = parseFloat(value)
      }

      _this.setState({ max: value })
    }), _temp)), _possibleConstructorReturn(_this, _ret)
  }

  _createClass(App, [
    {
      key: 'render',
      value: function render() {
        var _state = this.state,
          text = _state.text,
          isSingleLine = _state.isSingleLine

        var inlineStyle = {
          height: 400,
        }

        return _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            'h1',
            { className: 'headline' },
            'react-textfit',
            _react2.default.createElement(
              'a',
              {
                href: 'https://github.com/malte-wessel/react-textfit',
                target: '_blank',
                style: { float: 'right' },
              },
              _react2.default.createElement('i', { className: 'fa fa-github' }),
            ),
          ),
          _react2.default.createElement(
            'div',
            { className: 'row' },
            _react2.default.createElement(
              'div',
              { className: 'column-100' },
              _react2.default.createElement(
                'ul',
                null,
                _react2.default.createElement(
                  'li',
                  null,
                  'fit ',
                  _react2.default.createElement(
                    'strong',
                    null,
                    'headlines and paragraphs',
                  ),
                  ' into any element',
                ),
                _react2.default.createElement(
                  'li',
                  null,
                  _react2.default.createElement('strong', null, 'fast:'),
                  ' ',
                  'uses binary search for efficiently find the correct fit',
                ),
                _react2.default.createElement(
                  'li',
                  null,
                  _react2.default.createElement('strong', null, '100%'),
                  ' react-goodness',
                ),
                _react2.default.createElement(
                  'li',
                  null,
                  'works with',
                  ' ',
                  _react2.default.createElement('strong', null, 'any style'),
                  ' ',
                  'configuration (line-height, padding, ...)',
                ),
              ),
            ),
          ),
          _react2.default.createElement(
            'h2',
            { className: 'headline' },
            'Examples',
          ),
          _react2.default.createElement(
            'div',
            { className: 'row' },
            _react2.default.createElement(
              'div',
              { className: 'column-100' },
              _react2.default.createElement(
                _TextFit2.default,
                { isSingleLine: true, max: 500, className: 'box box-fat' },
                _react2.default.createElement(
                  'div',
                  { style: { fontSize: '26px' } },
                  'Fat headlines!',
                ),
              ),
            ),
          ),
          _react2.default.createElement(
            'div',
            { className: 'row' },
            _react2.default.createElement(
              'div',
              { className: 'column-25' },
              _react2.default.createElement(
                _TextFit2.default,
                { style: inlineStyle },
                'Multi line paragraphs at all sizes!',
              ),
            ),
            _react2.default.createElement(
              'div',
              { className: 'column-25' },
              _react2.default.createElement(
                _TextFit2.default,
                { style: inlineStyle },
                'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.',
              ),
            ),
            _react2.default.createElement(
              'div',
              { className: 'column-25' },
              _react2.default.createElement(
                _TextFit2.default,
                { style: inlineStyle },
                'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr.',
              ),
            ),
            _react2.default.createElement(
              'div',
              { className: 'column-25' },
              _react2.default.createElement(
                _TextFit2.default,
                { style: inlineStyle },
                'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.',
              ),
            ),
          ),
          _react2.default.createElement(
            'h2',
            { className: 'headline' },
            'Playground',
          ),
          _react2.default.createElement(
            'div',
            { className: 'row' },
            _react2.default.createElement(
              'div',
              { className: 'column-50' },
              _react2.default.createElement(
                _TextFit2.default,
                {
                  isSingleLine: isSingleLine,
                  style: inlineStyle,
                  min: this.state.min,
                  max: this.state.max ? this.state.max : null,
                  className: 'box box-fat',
                },
                text,
              ),
            ),
            _react2.default.createElement(
              'div',
              { className: 'column-50 playground' },
              _react2.default.createElement('textarea', {
                rows: '8',
                value: text,
                onChange: this.handleChangeText,
              }),
              _react2.default.createElement(
                'div',
                { className: 'row' },
                _react2.default.createElement(
                  'div',
                  { className: 'column-50' },
                  _react2.default.createElement('strong', null, 'Mode'),
                ),
                _react2.default.createElement(
                  'div',
                  { className: 'column-50' },
                  _react2.default.createElement(
                    'select',
                    { value: isSingleLine, onChange: this.handleChangeMode },
                    _react2.default.createElement(
                      'option',
                      { value: 'multi' },
                      'Multi line',
                    ),
                    _react2.default.createElement(
                      'option',
                      { value: 'single' },
                      'Single line',
                    ),
                  ),
                ),
              ),
              _react2.default.createElement(
                'div',
                { className: 'row' },
                _react2.default.createElement(
                  'div',
                  { className: 'column-50' },
                  _react2.default.createElement('strong', null, 'Minimum Size'),
                ),
                _react2.default.createElement(
                  'div',
                  { className: 'column-50' },
                  _react2.default.createElement(
                    'label',
                    null,
                    _react2.default.createElement('input', {
                      type: 'text',
                      value: this.state.min,
                      onChange: this.handleChangeMin,
                    }),
                  ),
                ),
              ),
              _react2.default.createElement(
                'div',
                { className: 'row' },
                _react2.default.createElement(
                  'div',
                  { className: 'column-50' },
                  _react2.default.createElement('strong', null, 'Maximum Size'),
                ),
                _react2.default.createElement(
                  'div',
                  { className: 'column-50' },
                  _react2.default.createElement(
                    'label',
                    null,
                    _react2.default.createElement('input', {
                      type: 'text',
                      value: this.state.max,
                      onChange: this.handleChangeMax,
                    }),
                  ),
                ),
              ),
            ),
          ),
        )
      },
    },
  ])

  return App
})(_react.Component)

exports.default = App;
('use strict')

Object.defineProperty(exports, '__esModule', {
  value: true,
})

var _createClass = (function() {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i]
      descriptor.enumerable = descriptor.enumerable || false
      descriptor.configurable = true
      if ('value' in descriptor) descriptor.writable = true
      Object.defineProperty(target, descriptor.key, descriptor)
    }
  }
  return function(Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps)
    if (staticProps) defineProperties(Constructor, staticProps)
    return Constructor
  }
})()

var _react = require('react')

var _react2 = _interopRequireDefault(_react)

var _reactDom = require('react-dom')

var _shallowEqual = require('../utils/shallowEqual')

var _shallowEqual2 = _interopRequireDefault(_shallowEqual)

var _series = require('../utils/series')

var _series2 = _interopRequireDefault(_series)

var _whilst = require('../utils/whilst')

var _whilst2 = _interopRequireDefault(_whilst)

var _throttle = require('../utils/throttle')

var _throttle2 = _interopRequireDefault(_throttle)

var _uniqueId = require('../utils/uniqueId')

var _uniqueId2 = _interopRequireDefault(_uniqueId)

var _innerSize = require('../utils/innerSize')

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj }
}

function _objectWithoutProperties(obj, keys) {
  var target = {}
  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue
    target[i] = obj[i]
  }
  return target
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError('Cannot call a class as a function')
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError(
      "this hasn't been initialised - super() hasn't been called",
    )
  }
  return call && (typeof call === 'object' || typeof call === 'function')
    ? call
    : self
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== 'function' && superClass !== null) {
    throw new TypeError(
      'Super expression must either be null or a function, not ' +
        typeof superClass,
    )
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true,
    },
  })
  if (superClass)
    Object.setPrototypeOf
      ? Object.setPrototypeOf(subClass, superClass)
      : (subClass.__proto__ = superClass)
}

function assertElementFitsWidth(el, width) {
  // -1: temporary bugfix, will be refactored soon
  return el.scrollWidth - 1 <= width
}

function assertElementFitsHeight(el, height) {
  // -1: temporary bugfix, will be refactored soon
  return el.scrollHeight - 1 <= height
}

var Textfit = (function(_Component) {
  _inherits(Textfit, _Component)

  function Textfit() {
    var _ref

    var _temp, _this, _ret

    _classCallCheck(this, Textfit)

    for (
      var _len = arguments.length, args = Array(_len), _key = 0;
      _key < _len;
      _key++
    ) {
      args[_key] = arguments[_key]
    }

    return (_ret = ((_temp = ((_this = _possibleConstructorReturn(
      this,
      (_ref = Textfit.__proto__ || Object.getPrototypeOf(Textfit)).call.apply(
        _ref,
        [this].concat(args),
      ),
    )), _this)), (_this.state = {
      fontSize: null,
      ready: false,
      shouldScroll: false,
    }), (_this.componentWillMount = function() {
      _this.handleWindowResize = (0, _throttle2.default)(
        _this.handleWindowResize,
        50,
      )
    }), (_this.componentDidMount = function() {
      window.addEventListener('resize', _this.handleWindowResize)

      _this.process()
    }), (_this.componentDidUpdate = function(prevProps) {
      if (!_this.state.ready) return
      if ((0, _shallowEqual2.default)(_this.props, prevProps)) return

      _this.process()
    }), (_this.componentWillUnmount = function() {
      window.removeEventListener('resize', _this.handleWindowResize)

      // Setting a new pid will cancel all running processes
      _this.pid = (0, _uniqueId2.default)()
    }), (_this.handleWindowResize = function() {
      _this.process()
    }), (_this.process = function() {
      var _this$props = _this.props,
        min = _this$props.min,
        isSingleLine = _this$props.isSingleLine,
        onReady = _this$props.onReady

      var el = (0, _reactDom.findDOMNode)(_this)
      var originalWidth = (0, _innerSize.innerWidth)(el)
      var originalHeight = (0, _innerSize.innerHeight)(el)

      // if we don't have a max value, use the full height of the container.
      var max = _this.props.max ? _this.props.max : originalHeight

      var wrapper = _this._root

      if (originalHeight <= 0 || isNaN(originalHeight)) {
        console.warn(
          'Can not process element without height. Make sure the element is displayed and has a static height.',
        )
        return
      }

      if (originalWidth <= 0 || isNaN(originalWidth)) {
        console.warn(
          'Can not process element without width. Make sure the element is displayed and has a static width.',
        )
        return
      }

      var pid = (0, _uniqueId2.default)()
      _this.pid = pid

      var shouldCancelProcess = function shouldCancelProcess() {
        return pid !== _this.pid
      }

      var testPrimary = isSingleLine
        ? function() {
            return assertElementFitsWidth(wrapper, originalWidth)
          }
        : function() {
            return assertElementFitsHeight(wrapper, originalHeight)
          }

      var testSecondary = isSingleLine
        ? function() {
            return assertElementFitsHeight(wrapper, originalHeight)
          }
        : function() {
            return assertElementFitsWidth(wrapper, originalWidth)
          }

      var mid = void 0
      var low = min
      var high = max

      _this.setState({ ready: false });

      (0, _series2.default)(
        [
          // Step 1:
          // Binary search to fit the element's height (multi line) / width (single line)
          function(stepCallback) {
            return (0, _whilst2.default)(
              function() {
                return low <= high
              },
              function(whilstCallback) {
                if (shouldCancelProcess()) return whilstCallback(true)
                mid = parseInt((low + high) / 2, 10)
                _this.setState({ fontSize: mid }, function() {
                  if (shouldCancelProcess()) return whilstCallback(true)
                  if (testPrimary()) low = mid + 1
                  else high = mid - 1
                  return whilstCallback()
                })
              },
              stepCallback,
            )
          },
          // Step 2:
          // Binary search to fit the element's width (multi line)
          // in order to not fit the elements height and decrease the width
          function(stepCallback) {
            if (testSecondary()) return stepCallback()
            low = min
            high = mid
            return (0, _whilst2.default)(
              function() {
                return low <= high
              },
              function(whilstCallback) {
                if (shouldCancelProcess()) return whilstCallback(true)
                mid = parseInt((low + high) / 2, 10)
                _this.setState({ fontSize: mid }, function() {
                  if (pid !== _this.pid) return whilstCallback(true)
                  if (testSecondary()) low = mid + 1
                  else high = mid - 1
                  return whilstCallback()
                })
              },
              stepCallback,
            )
          },
          // Step 3
          // Make sure fontSize is always greater than 0
          function(stepCallback) {
            if (mid > 0) return stepCallback()
            mid = 1
            _this.setState({ fontSize: mid }, stepCallback)
          },
        ],
        function(err) {
          // err will be true, if another process was triggered
          if (err) return

          _this.setState({
            ready: true,
            shouldScroll: (0, _innerSize.innerHeight)(wrapper) > originalHeight,
          })

          if (onReady) {
            onReady(mid)
          }
        },
      )
    }), _temp)), _possibleConstructorReturn(_this, _ret)
  }

  _createClass(Textfit, [
    {
      key: 'render',
      value: function render() {
        var _this2 = this

        var _props = this.props,
          children = _props.children,
          text = _props.text,
          style = _props.style,
          min = _props.min,
          max = _props.max,
          isSingleLine = _props.isSingleLine,
          onReady = _props.onReady,
          otherProps = _objectWithoutProperties(_props, [
            'children',
            'text',
            'style',
            'min',
            'max',
            'isSingleLine',
            'onReady',
          ])

        var _state = this.state,
          fontSize = _state.fontSize,
          ready = _state.ready

        var finalStyle = Object.assign({}, style, {
          fontSize: fontSize,
          overflowY: this.state.shouldScroll ? 'auto' : 'clip',
        })

        var wrapperStyle = {
          display: ready ? 'block' : 'inline-block',
          whiteSpace: isSingleLine ? 'nowrap' : 'normal',
          overflow: isSingleLine ? 'hidden' : 'visible',
          textOverflow: isSingleLine ? 'ellipsis' : 'clip',
        }

        return _react2.default.createElement(
          'div',
          Object.assign({ style: finalStyle }, otherProps),
          _react2.default.createElement('span', {
            ref: function ref(c) {
              return (_this2._root = c)
            },
            style: wrapperStyle,
            children: children,
          }),
        )
      },
    },
  ])

  return Textfit
})(_react.Component)

Textfit.propTypes = {
  /**
   * The text of children will be resized to fit
   */
  children: _react.PropTypes.node,
  /**
   * Minimum Size the text can ever be. Single line mode will shown an ellipsis
   * if text is still longer than its container
   */
  min: _react.PropTypes.number,
  /**
   * Maximum size the text can ever be.
   */
  max: _react.PropTypes.number,
  /**
   * are we dealing with only a single line of text?
   */
  isSingleLine: _react.PropTypes.bool,
  /**
   * a function to be called when the sizing is done. The final size value will be provided.
   */
  onReady: _react.PropTypes.func,
}
Textfit.defaultProps = {
  min: 13,
  isSingleLine: false,
}
exports.default = Textfit;
('use strict')

var _react = require('react')

var _react2 = _interopRequireDefault(_react)

var _reactDom = require('react-dom')

var _reactDom2 = _interopRequireDefault(_reactDom)

var _App = require('./App')

var _App2 = _interopRequireDefault(_App)

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj }
}

_reactDom2.default.render(
  _react2.default.createElement(_App2.default, null),
  document.getElementById('root'),
);
('use strict')

Object.defineProperty(exports, '__esModule', {
  value: true,
})
exports.innerHeight = innerHeight
exports.innerWidth = innerWidth
// Calculate height without padding.
function innerHeight(el) {
  var style = window.getComputedStyle(el, null)
  return el.clientHeight -
    parseInt(style.getPropertyValue('padding-top'), 10) -
    parseInt(style.getPropertyValue('padding-bottom'), 10)
}

// Calculate width without padding.
function innerWidth(el) {
  var style = window.getComputedStyle(el, null)
  return el.clientWidth -
    parseInt(style.getPropertyValue('padding-left'), 10) -
    parseInt(style.getPropertyValue('padding-right'), 10)
}
('use strict')

Object.defineProperty(exports, '__esModule', {
  value: true,
})
exports.default = series

var _process = require('process')

var _process2 = _interopRequireDefault(_process)

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj }
}

function series(tasks, cb) {
  var results = []
  var current = 0
  var isSync = true

  function done(err) {
    function end() {
      if (cb) cb(err, results)
    }
    if (isSync) _process2.default.nextTick(end)
    else end()
  }

  function each(err, result) {
    results.push(result)
    if (++current >= tasks.length || err) done(err)
    else tasks[current](each)
  }

  if (tasks.length > 0) tasks[0](each)
  else done(null)

  isSync = false
} /**
   * Run the functions in the tasks array in series, each one running once the previous function has completed.
   * If any functions in the series pass an error to its callback, no more functions are run,
   * and callback is immediately called with the value of the error. Otherwise, callback receives an array of results
   * when tasks have completed.
   * Taken from https://github.com/feross/run-series
   *
   * @params {Array} tasks An array containing functions to run, each function is passed a callback(err, result) which it must call on completion with an error err (which can be null) and an optional result value.
   * @params {Function} callback(err, results) - An optional callback to run once all the functions have completed. This function gets a results array containing all the result arguments passed to the task callbacks.
   */
('use strict')

Object.defineProperty(exports, '__esModule', {
  value: true,
})
exports.default = shallowEqual
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true
  }

  var keysA = Object.keys(objA)
  var keysB = Object.keys(objB)

  if (keysA.length !== keysB.length) {
    return false
  }

  // Test for A's keys different from B.
  var hasOwn = Object.prototype.hasOwnProperty
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwn.call(objB, keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
      return false
    }
  }

  return true
}
('use strict')

Object.defineProperty(exports, '__esModule', {
  value: true,
})
exports.default = throttle
/**
 * Returns a new function that, when invoked, invokes `func` at most once per `wait` milliseconds.
 * Taken from https://github.com/component/throttle v1.0.0
 *
 * @param {Function} func Function to wrap.
 * @param {Number} wait Number of milliseconds that must elapse between `func` invocations.
 * @return {Function} A new function that wraps the `func` function passed in.
 */

function throttle(func, wait) {
  var ctx = void 0
  var args = void 0
  var rtn = void 0
  var timeoutID = void 0
  var last = 0

  function call() {
    timeoutID = 0
    last = +new Date()
    rtn = func.apply(ctx, args)
    ctx = null
    args = null
  }

  return function throttled() {
    ctx = this
    args = arguments
    var delta = new Date() - last
    if (!timeoutID) {
      if (delta >= wait) call()
      else timeoutID = setTimeout(call, wait - delta)
    }
    return rtn
  }
}
('use strict')

Object.defineProperty(exports, '__esModule', {
  value: true,
})
exports.default = uniqueId
var uid = 0

function uniqueId() {
  return uid++
}
('use strict')

Object.defineProperty(exports, '__esModule', {
  value: true,
})
exports.default = whilst
var noop = function noop() {}

/**
 * Repeatedly call fn, while test returns true. Calls callback when stopped, or an error occurs.
 *
 * @param {Function} test Synchronous truth test to perform before each execution of fn.
 * @param {Function} fn A function which is called each time test passes. The function is passed a callback(err), which must be called once it has completed with an optional err argument.
 * @param {Function} callback A callback which is called after the test fails and repeated execution of fn has stopped.
 */

function whilst(test, iterator) {
  var callback = arguments.length > 2 && arguments[2] !== undefined
    ? arguments[2]
    : noop

  if (test()) {
    iterator(function next(err) {
      for (
        var _len = arguments.length,
          args = Array(_len > 1 ? _len - 1 : 0),
          _key = 1;
        _key < _len;
        _key++
      ) {
        args[_key - 1] = arguments[_key]
      }

      if (err) {
        callback(err)
      } else if (test.apply(this, args)) {
        iterator(next)
      } else {
        callback(null)
      }
    })
  } else {
    callback(null)
  }
}
